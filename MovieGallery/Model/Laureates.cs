// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MovieGallery;
//
//    var laureates = Laureates.FromJson(jsonString);

namespace MovieGallery
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Laureates
    {
        [JsonProperty("laureates", NullValueHandling = NullValueHandling.Ignore)]
        public List<Laureate> NobleLaureates { get; set; }

        [JsonProperty("laureateArray")]
        public object LaureateArray { get; set; }
    }

    public partial class Laureate
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("firstname", NullValueHandling = NullValueHandling.Ignore)]
        public string Firstname { get; set; }

        [JsonProperty("surname", NullValueHandling = NullValueHandling.Ignore)]
        public string Surname { get; set; }

        [JsonProperty("born", NullValueHandling = NullValueHandling.Ignore)]
        public string Born { get; set; }

        [JsonProperty("died", NullValueHandling = NullValueHandling.Ignore)]
        public Died Died { get; set; }

        [JsonProperty("bornCountry", NullValueHandling = NullValueHandling.Ignore)]
        public string BornCountry { get; set; }

        [JsonProperty("bornCountryCode", NullValueHandling = NullValueHandling.Ignore)]
        public string BornCountryCode { get; set; }

        [JsonProperty("bornCity", NullValueHandling = NullValueHandling.Ignore)]
        public string BornCity { get; set; }

        [JsonProperty("diedCountry")]
        public string DiedCountry { get; set; }

        [JsonProperty("diedCountryCode")]
        public string DiedCountryCode { get; set; }

        [JsonProperty("diedCity")]
        public string DiedCity { get; set; }

        [JsonProperty("gender", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gender { get; set; }

        [JsonProperty("prizes", NullValueHandling = NullValueHandling.Ignore)]
        public Prize[] Prizes { get; set; }
    }

    public partial class Died
    {
    }

    public partial class Prize
    {
        [JsonProperty("year", NullValueHandling = NullValueHandling.Ignore)]
        public long? Year { get; set; }

        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public long? Category { get; set; }

        [JsonProperty("share", NullValueHandling = NullValueHandling.Ignore)]
        public long? Share { get; set; }

        [JsonProperty("motivation", NullValueHandling = NullValueHandling.Ignore)]
        public string Motivation { get; set; }

        [JsonProperty("affiliations", NullValueHandling = NullValueHandling.Ignore)]
        public Died[] Affiliations { get; set; }

        [JsonProperty("overallMotivation")]
        public object OverallMotivation { get; set; }
    }

    public partial class Laureates
    {
        public static Laureates FromJson(string json) => JsonConvert.DeserializeObject<Laureates>(json, MovieGallery.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Laureates self) => JsonConvert.SerializeObject(self, MovieGallery.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
